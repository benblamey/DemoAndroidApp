<?xml version="1.0" encoding="UTF-8"?>
<!-- 
'name' is the project name used throughout the build process. Not to be confused with the name in the app manifest XML file.
'default' the default target to use when no target is supplied. Presumably shows help if a target such as 'debug' or 'release' is omitted.
-->
<project name="OHOW-Android" default="help">

<!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the
         default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android'
         tool, as well as ADT.
         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <property file="default.properties" />


    <!-- Required pre-setup import -->
    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
	 
    <target name="-pre-build" depends="ml4d-updatemanifest">
    </target>
	
	<!-- We update the manifest file to include the official build number (if there is one) 
		 and the build tag. Developers should not set the build number themselves,
		 only the build server does this.
	-->
	<target name="ml4d-updatemanifest" depends="-ml4d-updatemanifest-developer, -ml4d-updatemanifest-official">
	    <!-- Retrieve the full version name from the manifest XML -->
        <xpath input="AndroidManifest.xml" expression="/manifest/@android:versionName"
               output="ml4d-packageversion"/>
    </target>
    
    <target name="-ml4d-updatemanifest-official" if="build.number">
		<replaceregexp file="${basedir}/AndroidManifest.xml"
               match="android:versionName=&quot;([0-9]+)\.([0-9]+)\.([0-9]+)\.[^&quot;]*&quot;"
               replace="android:versionName=&quot;\1\.\2\.\3\.${build.number} (${ml4d.build.tag})&quot;"
               byline="true"/>	
	</target>
	
	<target name="-ml4d-updatemanifest-developer"  >
		<!-- Update the manifest XML file to include the build number. -->
		<replaceregexp file="${basedir}/AndroidManifest.xml"
               match="android:versionName=&quot;([0-9]+)\.([0-9]+)\.([0-9]+)\.[^&quot;]*&quot;"
               replace="android:versionName=&quot;\1\.\2\.\3\.\[UNOFFICIAL BUILD - DO NOT USE\]&quot;"
               byline="true"/>
	</target>
	
<!--

    <target name="-pre-compile">
    </target>

    [This is typically used for code obfuscation.
     Compiled code location: ${out.classes.absolute.dir}
     If this is not done in place, override ${out.dex.input.absolute.dir}]

    <target name="-post-compile"/>
-->
	
	<target name="ml4dpublishrelease" depends="release">

		<!-- Create a directory to hold the output file -->
		<ftp action="mkdir"
			server="89.145.116.4"
			port="21"
			userid="${ml4d.ohow.ftp.username}"
			password="${ml4d.ohow.ftp.password}"
			passive="yes"
			depends="yes"
			remotedir="/ei95hc83hs84hfgh59wj2iaoclr496uhshx/android/${ml4d-packageversion}"/>
	
		<!-- Upload the output file to the FTP server. -->
		<ftp 
			server="89.145.116.4"
			port="21"
			remotedir="/ei95hc83hs84hfgh59wj2iaoclr496uhshx/android/${ml4d-packageversion}"
			userid="${ml4d.ohow.ftp.username}"
			password="${ml4d.ohow.ftp.password}"
			passive="yes"
			depends="yes"
			binary="yes">
			<fileset file="${out.release.file}"/>
		</ftp>

	</target>

    <!-- Execute the Android Setup task that will setup some properties
         specific to the target, and import the build rules files.

         The rules file is imported from
            <SDK>/tools/ant/
         Depending on the project type it can be either:
         - main_rules.xml
         - lib_rules.xml
         - test_rules.xml

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <setup> task.
             - customize it to your needs.
         - Customize the whole script.
             - copy/paste the content of the rules files (minus the top node)
               into this file, *after* the <setup> task
             - disable the import of the rules by changing the setup task
               below to <setup import="false" />.
             - customize to your needs.
    -->
    <setup />

</project>
